{"version":3,"sources":["assets/img/logo.svg","screens/Components/Alert.js","screens/Forca.js","routes/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["AlertDialogComponent","props","React","useState","isOpen","setIsOpen","onClose","fontSize","fontWeight","title","body","colorScheme","onClick","window","location","reload","ml","opt","Forca","selected","words","getRandomInt","length","state","secretWord","word","toUpperCase","tip","already_chosen_letters","word_placeholder","generatePlaceholder","players","points","roullete_value","runRollete","round","end_game","roullete","Math","floor","random","min","max","ceil","placeholder","split","forEach","letter","new_round","new_points","new_chosen_letters","this","new_word_placeholder","indexOf","match","includes","setState","keyboard","qwerty_alphabet","line","buttons","already_chosen","push","isDisabled","choiceLetter","direction","spacing","align","marginY","table","player","index","isNumeric","marginTop","size","width","innerWidth","height","innerHeight","className","marginBottom","w","p","color","console","log","QwertyAlphabetKeyboard","renderTablePlacar","Alert","Component","Routes","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57709f02.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"@chakra-ui/react\";\r\n\r\nfunction AlertDialogComponent(props) {\r\n  const [isOpen, setIsOpen] = React.useState(props.isOpen);\r\n  const onClose = () => setIsOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <AlertDialog isOpen={props.isOpen} onClose={onClose}>\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {props.title}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>{props.body}</AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                colorScheme=\"red\"\r\n                onClick={() => {\r\n                  window.location.reload();\r\n                }}\r\n                ml={3}\r\n              >\r\n                {props.opt}\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AlertDialogComponent;\r\n","import logo from \"../assets/img/logo.svg\";\r\nimport \"../assets/css/App.css\";\r\nimport { qwerty_alphabet } from \"../assets/json/qwert.json\";\r\nimport { roullete } from \"../assets/json/roullete.json\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Stack,\r\n  Box,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tfoot,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n  Center,\r\n  Text,\r\n  Badge,\r\n} from \"@chakra-ui/react\";\r\nimport { PinInput, PinInputField } from \"@chakra-ui/react\";\r\nimport { words } from \"../assets/json/words.json\";\r\nimport Confetti from \"react-confetti\";\r\nimport AlertDialogComponent from \"./Components/Alert\";\r\n\r\nclass Forca extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let selected = words[this.getRandomInt(0, words.length)];\r\n    this.state = {\r\n      secretWord: selected.word.toUpperCase(),\r\n      tip: selected.tip,\r\n      already_chosen_letters: [],\r\n      word_placeholder: this.generatePlaceholder(selected.word),\r\n      players: [\"Jogador 1\", \"Jogador 2\", \"Jogador 3\"],\r\n      points: [0, 0, 0],\r\n      roullete_value: this.runRollete(),\r\n      round: this.getRandomInt(0, 2),\r\n      end_game: false,\r\n    };\r\n  }\r\n\r\n  runRollete() {\r\n    return roullete[Math.floor(Math.random() * roullete.length)];\r\n  }\r\n\r\n  getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  generatePlaceholder(word) {\r\n    let placeholder = \"\";\r\n    word.split(\"\").forEach((letter) => {\r\n      placeholder += \" _ \";\r\n    });\r\n\r\n    return placeholder;\r\n  }\r\n\r\n  choiceLetter(letter) {\r\n    let new_chosen_letters = [...this.state.already_chosen_letters, letter];\r\n    let new_word_placeholder = \"\";\r\n    let new_round;\r\n    let new_points;\r\n\r\n    let letter_match = this.state.secretWord.indexOf(letter);\r\n    if (letter_match >= 0) {\r\n      this.state.secretWord.split(\"\").forEach((letter) => {\r\n        let match = new_chosen_letters.includes(letter);\r\n        new_word_placeholder += match ? letter : \" _ \";\r\n      });\r\n      new_round = this.state.round;\r\n      new_points = [...this.state.points];\r\n      new_points[this.state.round] += this.state.roullete_value;\r\n    } else {\r\n      new_round = this.state.round + 1 > 2 ? 0 : this.state.round + 1;\r\n      new_word_placeholder = this.state.word_placeholder;\r\n\r\n      new_points = [...this.state.points];\r\n    }\r\n\r\n    this.setState({\r\n      already_chosen_letters: [...this.state.already_chosen_letters, letter],\r\n      word_placeholder: new_word_placeholder,\r\n      end_game: this.state.secretWord == new_word_placeholder ? true : false,\r\n      round: new_round,\r\n      roullete_value: this.runRollete(),\r\n      points: new_points,\r\n    });\r\n  }\r\n\r\n  QwertyAlphabetKeyboard() {\r\n    let keyboard = [];\r\n\r\n    qwerty_alphabet.forEach((line) => {\r\n      let buttons = [];\r\n\r\n      line.forEach((letter) => {\r\n        let already_chosen = this.state.already_chosen_letters.includes(letter);\r\n\r\n        buttons.push(\r\n          <Button\r\n            colorScheme=\"blue\"\r\n            isDisabled={already_chosen}\r\n            onClick={() => {\r\n              this.choiceLetter(letter);\r\n            }}\r\n          >\r\n            {letter}\r\n          </Button>\r\n        );\r\n      });\r\n\r\n      keyboard.push(\r\n        <Stack direction=\"row\" spacing={4} align=\"center\" marginY={2}>\r\n          {buttons}\r\n        </Stack>\r\n      );\r\n    });\r\n    return keyboard;\r\n  }\r\n\r\n  renderTablePlacar() {\r\n    let table = [];\r\n    this.state.players.forEach((player, index) => {\r\n      table.push(\r\n        <Tr>\r\n          <Td>{player}</Td>\r\n          <Td isNumeric>{this.state.points[index]}</Td>\r\n        </Tr>\r\n      );\r\n    });\r\n    return (\r\n      <Box marginTop={2}>\r\n        <Table size=\"sm\">\r\n          <Thead>\r\n            <Tr>\r\n              <Th>Jogador</Th>\r\n              <Th isNumeric>Pontos</Th>\r\n            </Tr>\r\n          </Thead>\r\n          <Tbody>{table}</Tbody>\r\n        </Table>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n      width,\r\n      height,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {this.state.end_game && <Confetti />}\r\n\r\n          <Stack spacing={5} marginBottom={2}>\r\n            <Box w=\"100%\" p={4} color=\"white\">\r\n              <Badge width={\"100%\"}>\r\n                <Text fontSize=\"3xl\">{this.state.tip}</Text>\r\n              </Badge>\r\n            </Box>\r\n\r\n            <Text fontSize=\"6xl\" color=\"success\">\r\n              {this.state.word_placeholder}\r\n            </Text>\r\n            <Text fontSize=\"xl\" color=\"white\">\r\n              {console.log(this.state.round)}\r\n              {console.log(this.state.players)}\r\n              Vez do {this.state.players[this.state.round]}\r\n            </Text>\r\n            <Text color=\"gray.500\" fontSize=\"md\">\r\n              Valendo{\" \"}\r\n              <Badge colorScheme=\"green\">\r\n                {this.state.roullete_value} pontos\r\n              </Badge>\r\n            </Text>\r\n          </Stack>\r\n\r\n          {this.QwertyAlphabetKeyboard()}\r\n\r\n          {this.state.end_game &&\r\n            `${this.state.players[this.state.round]} ganhou`}\r\n\r\n          {this.renderTablePlacar()}\r\n        </header>\r\n        <AlertDialogComponent\r\n          isOpen={this.state.end_game}\r\n          title={\"Fim de jogo\"}\r\n          body={`O Jogador ${this.state.players[this.state.round]} ganhou com ${\r\n            this.state.points[this.state.round]\r\n          } pontos`}\r\n          opt={\"Novo Jogo\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forca;\r\n","import Forca from \"../screens/Forca\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nfunction Routes() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <Forca />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import * as React from \"react\";\r\n\r\n// 1. import `ChakraProvider` component\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport { Button, ButtonGroup } from \"@chakra-ui/react\";\r\nimport Routes from \"./routes/Routes\";\r\nfunction App({ Component }) {\r\n  // 2. Use at the root of your app\r\n  return (\r\n    <ChakraProvider>\r\n      <Routes />\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}